from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, login_user, login_required, logout_user, current_user, UserMixin
from models import db, bcrypt, User, Movie, Showtime, Reservation, ROLE_ADMIN, ROLE_USER
from config import Config
from datetime import datetime

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)
bcrypt.init_app(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


@app.route("/signup", methods=["GET", "POST"])
def signup():
    if request.method == "POST":
        username = request.form["username"]
        email = request.form["email"]
        password = request.form["password"]
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        
        user = User(username=username, email=email, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        
        flash('User created successfully!', 'success')
        return redirect(url_for('login'))
    return render_template('signup.html')


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form["email"]
        password = request.form["password"]
        
        user = User.query.filter_by(email=email).first()
        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for("dashboard"))
        else:
            flash('Login Failed. Check your email and/or password', 'danger')
    return render_template('login.html')


@app.route("/dashboard")
@login_required
def dashboard():
    if current_user.role == ROLE_ADMIN:
        movies = Movie.query.all()
        return render_template('admin_dashboard.html', movies=movies)
    return render_template('user_dashboard.html')


@app.route("/movie/<int:movie_id>", methods=["GET", "POST"])
@login_required
def movie(movie_id):
    movie = Movie.query.get_or_404(movie_id)
    if request.method == "POST":
        # Logic to handle reservations
        showtime_id = request.form["showtime_id"]
        seats = request.form["seats"]
        
        showtime = Showtime.query.get_or_404(showtime_id)
        available_seats = showtime.total_seats - len(showtime.reservations)
        
        if int(seats) <= available_seats:
            reservation = Reservation(user_id=current_user.id, showtime_id=showtime_id, seats_reserved=seats)
            db.session.add(reservation)
            db.session.commit()
            flash('Reservation successful!', 'success')
        else:
            flash('Not enough seats available!', 'danger')
    return render_template('movie.html', movie=movie)


@app.route("/reserve_seat/<int:showtime_id>", methods=["GET"])
@login_required
def reserve_seat(showtime_id):
    showtime = Showtime.query.get_or_404(showtime_id)
    return render_template('reserve_seat.html', showtime=showtime)


@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("login"))


if __name__ == "__main__":
    app.run(debug=True)
